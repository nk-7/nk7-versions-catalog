[versions]
kotlin = "2.0.20"
kotlinx = "1.8.1"
spring-boot = "3.3.1"
spring-cloud = "2023.0.0"
spring-statemachine = "4.0.0"
ktor = "2.3.12"
koin = "3.5.6"
exposed = "0.52.0"
commons-rng = "1.5"
slf4j = "2.0.13"
logback = "1.5.6"
junit = "5.10.3"
assertj = "3.26.3"
testcontainers = "1.19.8"
opentelemetry = "1.40.0"

[libraries]
#BOMs
bom-kotlin = { module = "org.jetbrains.kotlin:kotlin-bom", version.ref = "kotlin" }
bom-spring-boot = { module = "org.springframework.boot:spring-boot-dependencies", version.ref = "spring-boot" }
bom-spring-cloud = { module = "org.springframework.cloud:spring-cloud-dependencies", version.ref = "spring-cloud" }
bom-spring-statemachine = { module = "org.springframework.statemachine:spring-statemachine-bom", version.ref = "spring-statemachine" }
bom-ktor = { module = "io.ktor:ktor-bom", version.ref = "ktor" }
bom-koin = { module = "io.insert-koin:koin-bom", version.ref = "koin" }
bom-exposed = { module = "org.jetbrains.exposed:exposed-bom", version.ref = "exposed" }
bom-junit = { module = "org.junit:junit-bom", version.ref = "junit" }
bom-testcontainers = { module = "org.testcontainers:testcontainers-bom", version.ref = "testcontainers" }
bom-opentelemetry = { module = "io.opentelemetry:opentelemetry-bom", version.ref = "opentelemetry" }

#Kotlin libs
kotlin-stdlib-jdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test" }
kotlin-test-junit5 = { module = "org.jetbrains.kotlin:kotlin-test-junit5" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx" }
kotlinx-coroutines-core-jvm = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm", version.ref = "kotlinx" }
kotlinx-coroutines-reactive = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactive", version.ref = "kotlinx" }
kotlinx-coroutines-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "kotlinx" }

#Spring
spring-boot-configuration-processor = { module = "org.springframework.boot:spring-boot-configuration-processor", version.ref = "spring-boot" }
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }
spring-boot-starter-starter = { module = "org.springframework.boot:spring-boot-starter" }
spring-data-r2dbc = { module = "org.springframework.data:spring-data-r2dbc" }

# Databases
hikari = { module = "com.zaxxer:HikariCP" }
mysql = { module = "com.mysql:mysql-connector-j" }
postgresql = { module = "org.postgresql:postgresql" }
postgresql-r2dbc = { module = "org.postgresql:r2dbc-postgresql" }
sqlite = { module = "org.xerial:sqlite-jdbc" }
liquibase = { module = "org.liquibase:liquibase-core" }

#Kafka
kafka-clients = { module = "org.apache.kafka:kafka-clients" }
kafka-stream = { module = "org.apache.kafka:kafka-streams" }

# Open Telemetry
opentelemtery-api = { module = "io.opentelemetry:opentelemetry-api" }
opentelemetry-sdk = { module = "io.opentelemetry:opentelemetry-sdk" }
opentelemetry-sdk-metrics = { module = "io.opentelemetry:opentelemetry-sdk-metrics" }
opentelemetry-sdk-trace = { module = "io.opentelemetry:opentelemetry-sdk-trace" }
opentelemetry-sdk-logs = { module = "io.opentelemetry:opentelemetry-sdk-logs" }
opentelemetry-sdk-common = { module = "io.opentelemetry:opentelemetry-sdk-common" }
opentelemetry-sdk-extension-autoconfigure = { module = "io.opentelemetry:opentelemetry-sdk-extension-autoconfigure" }
opentelemetry-sdk-extension-autoconfigure-spi = { module = "io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi" }
opentelemetry-sdk-extension-jaeger-remote-sampler = { module = "io.opentelemetry:opentelemetry-sdk-extension-jaeger-remote-sampler" }
opentelemetry-sdk-extension-incubator = { module = "io.opentelemetry:opentelemetry-sdk-extension-incubator" }
opentelemetry-extension-kotlin = { module = "io.opentelemetry:opentelemetry-extension-kotlin" }

opentelemetry-exporter-otlp = { module = "io.opentelemetry:opentelemetry-exporter-otlp" }
opentelemetry-exporter-logging-otlp = { module = "io.opentelemetry:opentelemetry-exporter-logging-otlp" }
opentelemetry-exporter-otlp-common = { module = "io.opentelemetry:opentelemetry-exporter-otlp-common" }
opentelemetry-exporter-logging = { module = "io.opentelemetry:opentelemetry-exporter-logging" }
opentelemetry-exporter-zipkin = { module = "io.opentelemetry:opentelemetry-exporter-zipkin" }
opentelemetry-exporter-prometheus = { module = "io.opentelemetry:opentelemetry-exporter-prometheus" }
opentelemetry-exporter-common = { module = "io.opentelemetry:opentelemetry-exporter-common" }
opentelemetry-exporter-sender-okhttp = { module = "io.opentelemetry:opentelemetry-exporter-sender-okhttp" }
opentelemetry-exporter-sender-jdk = { module = "io.opentelemetry:opentelemetry-exporter-sender-jdk" }
opentelemetry-exporter-sender-grpc-managed-channel = { module = "io.opentelemetry:opentelemetry-exporter-sender-grpc-managed-channel" }
opentelemetry-context = { module = "io.opentelemetry:opentelemetry-context" }
opentelemetry-extension-trace-propagators = { module = "io.opentelemetry:opentelemetry-extension-trace-propagators" }
opentelemetry-sdk-testing = { module = "io.opentelemetry:opentelemetry-sdk-testing" }

#Logging
slf4j = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }

# Test
assertj = { module = "org.assertj:assertj-core", version.ref = "assertj" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine" }
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter" }
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params" }

testcontainers = { module = "org.testcontainers:testcontainers" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql" }
testcontainers-r2dbc = { module = "org.testcontainers:r2dbc" }

# Commons
commons-lang3 = { module = "org.apache.commons:commons-lang3" }
commons-text = { module = "org.apache.commons:commons-text" }


[bundles]
kotlin = [
  "kotlin-stdlib-jdk8",
  "kotlin-reflect",
  "kotlinx-coroutines-core",
  "kotlinx-coroutines-core-jvm",
  "kotlinx-coroutines-reactive",
  "kotlinx-coroutines-reactor"
]
test = [
  "kotlin-test",
  "kotlin-test-junit5",
  "assertj",
  "junit-jupiter",
  "junit-jupiter-engine",
  "junit-jupiter-params"
]
testcontainers = [
  "testcontainers",
  "testcontainers-postgresql",
  "testcontainers-r2dbc"
]
